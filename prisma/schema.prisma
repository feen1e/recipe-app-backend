// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id String @id @default(uuid())
  username String @unique
  email String @unique
  password String
  bio String?
  avatarUrl String?
  role Role @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  recipes Recipe[] 
  ratings Rating[]
  favorites Favorite[]
  collections Collection[]
}

model Recipe {
  id String @id @default(uuid())
  title String
  description String?
  ingredients Json
  steps Json
  imageUrl String?
  avgRating Float @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String
  ratings Rating[]
  favorites Favorite[] 
  collections CollectionRecipe[]
}

model Rating {
  id String @id @default(uuid())
  stars Int
  review String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId String

  @@unique([userId, recipeId])
}

model Favorite {
  userId String
  recipeId String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@id([userId, recipeId])
}

model Collection {
  id String @id @default(uuid())
  name String
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  recipes CollectionRecipe[]
}

model CollectionRecipe {
  collectionId String
  recipeId String

  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@id([collectionId, recipeId])
}